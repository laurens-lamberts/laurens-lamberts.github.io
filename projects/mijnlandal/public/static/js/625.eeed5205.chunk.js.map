{"version":3,"file":"static/js/625.eeed5205.chunk.js","mappings":"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","sources":["../node_modules/flatted/esm/index.js","../node_modules/react-native-flipper/index.js","../node_modules/react-query-native-devtools/src/index.ts"],"sourcesContent":["/*! (c) 2020 Andrea Giammarchi */\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst {keys} = Object;\n\nconst Primitive = String;   // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => (\n  value instanceof Primitive ? Primitive(value) : value\n);\n\nconst Primitives = (_, value) => (\n  typeof value === primitive ? new Primitive(value) : value\n);\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({k, a: [input, parsed, tmp, $]});\n      }\n      else\n        output[k] = $.call(output, k, tmp);\n    }\n    else if (output[k] !== ignore)\n      output[k] = $.call(output, k, value);\n  }\n  for (let {length} = lazy, i = 0; i < length; i++) {\n    const {k, a} = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ?\n              revive(input, new Set, value, $) :\n              value;\n  return $.call({'': tmp}, '', tmp);\n};\n\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ?\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\n            (replacer || noop);\n  const known = new Map;\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({'': value}, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\n\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n// $FlowFixMe\nimport {NativeModules, NativeEventEmitter} from 'react-native';\n\nconst {Flipper} = NativeModules;\n\nexport default Flipper;\n\nconst listeners = {}; // plugin#method -> callback\nconst plugins = {}; // plugin -> Plugin\n\nfunction assertSerializable(data) {\n  if (\n    data === undefined ||\n    Array.isArray(data) ||\n    (data && typeof data === 'object')\n  ) {\n    return true;\n  }\n  throw new Error(\n    'Flipper: Expected serializable (undefined, an array or an object). Got: ' +\n      data,\n  );\n}\n\nclass Connection {\n  connected;\n  pluginId;\n\n  constructor(pluginId) {\n    this.connected = false;\n    this.pluginId = pluginId;\n  }\n\n  send(method, data) {\n    if (!this.connected) {\n      throw new Error('Cannot send data, not connected');\n    }\n    assertSerializable(data);\n    Flipper.send(this.pluginId, method, JSON.stringify(data));\n  }\n\n  reportErrorWithMetadata(reason, stackTrace) {\n    Flipper.reportErrorWithMetadata(\n      this.pluginId,\n      '' + reason,\n      '' + stackTrace,\n    );\n  }\n\n  reportError(error) {\n    Flipper.reportError(this.pluginId, '' + error);\n  }\n\n  receive(method, listener) {\n    if (!this.connected) {\n      throw new Error('Cannot receive data, not connected');\n    }\n\n    listeners[this.pluginId + '#' + method] = listener;\n    Flipper.subscribe(this.pluginId, method);\n  }\n}\n\nclass Responder {\n  responderId;\n\n  constructor(responderId) {\n    this.responderId = responderId;\n  }\n\n  success(response) {\n    assertSerializable(response);\n    Flipper.respondSuccess(\n      this.responderId,\n      response == null ? null : JSON.stringify(response),\n    );\n  }\n\n  error(response) {\n    assertSerializable(response);\n    Flipper.respondError(this.responderId, JSON.stringify(response));\n  }\n}\n\nfunction startEventListeners() {\n  const emitter = new NativeEventEmitter(Flipper);\n\n  emitter.addListener('react-native-flipper-plugin-connect', event => {\n    const {plugin} = event;\n    if (plugins[plugin]) {\n      const p = plugins[plugin];\n      p._connection.connected = true;\n      p.onConnect(p._connection);\n    }\n  });\n\n  emitter.addListener('react-native-flipper-plugin-disconnect', event => {\n    const {plugin} = event;\n    if (plugins[plugin]) {\n      const p = plugins[plugin];\n      p._connection.connected = false;\n      p.onDisconnect();\n    }\n  });\n\n  emitter.addListener('react-native-flipper-receive-event', event => {\n    const {plugin, method, params, responderId} = event;\n    const key = plugin + '#' + method;\n    if (listeners[key]) {\n      const responder =\n        responderId != null ? new Responder(responderId) : undefined;\n      listeners[key](JSON.parse(params), responder);\n    }\n  });\n}\n\n// $FlowFixMe\nexport function addPlugin(plugin) {\n  if (!Flipper) {\n    printNoFlipperWarning();\n    return;\n  }\n  if (!plugin || typeof plugin !== 'object') {\n    throw new Error('Expected plugin, got ' + plugin);\n  }\n  ['getId', 'onConnect', 'onDisconnect'].forEach(method => {\n    if (typeof plugin[method] !== 'function') {\n      throw new Error(`Plugin misses an implementation for '${method}'`);\n    }\n  });\n  const runInBackground =\n    typeof plugin.runInBackground === 'function'\n      ? !!plugin.runInBackground()\n      : false;\n  const id = plugin.getId();\n  plugin._connection = new Connection(id);\n  plugins[id] = plugin;\n\n  Flipper.registerPlugin(id, runInBackground, status => {\n    if (status === 'noflipper') {\n      printNoFlipperWarning();\n    }\n  });\n}\n\nfunction printNoFlipperWarning() {\n  // $FlowFixMe\n  if (typeof __DEV__ !== 'undefined' && __DEV__) {\n    console.warn(\n      'The native module for Flipper seems unavailable. Please verify that `react-native-flipper` is installed as yarn dependency to your project and, for iOS, that `pod install` is run in the `ios` directory.',\n    );\n  }\n}\n\nif (Flipper) {\n  startEventListeners();\n}\n","import { stringify } from 'flatted';\nimport { addPlugin as addFlipperPlugin, Flipper } from 'react-native-flipper';\nimport { Query, QueryClient } from 'react-query';\n\ntype SerializedQueriesPayload = {\n  queries: string;\n};\n\ntype PluginProps = {\n  queryClient: QueryClient;\n};\n\nexport function addPlugin({ queryClient }: PluginProps) {\n  const queryCache = queryClient.getQueryCache();\n\n  let unsubscribe: (() => void) | undefined;\n\n  function getQueries() {\n    return queryCache.getAll();\n  }\n\n  function getQueryByHash(queryHash: string): Query | undefined {\n    return getQueries().find((query) => query.queryHash === queryHash);\n  }\n\n  function getSerializedQueries(): SerializedQueriesPayload {\n    const queries = getQueries();\n\n    const serializedQueries = {\n      queries: stringify(queries),\n    };\n\n    return serializedQueries;\n  }\n\n  /**\n   * handles QueryCacheNotifyEvent\n   * @param event - QueryCacheNotifyEvent, but RQ doesn't have it exported\n   */\n  const handleCacheEvent =\n    (connection: Flipper.FlipperConnection) => (event: any) => {\n      connection.send('queryCacheEvent', {\n        cashEvent: stringify(event),\n      });\n    };\n\n  addFlipperPlugin({\n    getId: () => 'flipper-plugin-react-query-native-devtools',\n    onConnect(connection) {\n      // send initial queries\n      connection.send('queries', getSerializedQueries());\n\n      // Subscribe to QueryCacheNotifyEvent and send updates only\n      unsubscribe = queryCache.subscribe(handleCacheEvent(connection));\n\n      connection.receive('queryRefetch', ({ queryHash }, responder) => {\n        getQueryByHash(queryHash)?.fetch();\n        responder.success({ ack: true });\n      });\n\n      connection.receive('queryRemove', ({ queryHash }, responder) => {\n        const query = getQueryByHash(queryHash);\n        if (query) {\n          queryClient.removeQueries(query.queryKey, { exact: true });\n        }\n        responder.success({ ack: true });\n      });\n    },\n    onDisconnect() {\n      if (unsubscribe) {\n        unsubscribe();\n        unsubscribe = undefined;\n      }\n    },\n    runInBackground: () => true,\n  });\n}\n"],"names":["JSON","parse","$stringify","stringify","Primitive","Object","keys","String","primitive","object","noop","_","value","set","known","input","index","push","replacer","space","$","k","v","indexOf","Map","output","i","call","firstRun","length","replace","join","key","after","this","get","Flipper","NativeModules","listeners","plugins","assertSerializable","data","undefined","Array","isArray","Error","Connection","pluginId","connected","method","send","reason","stackTrace","reportErrorWithMetadata","error","reportError","listener","subscribe","Responder","responderId","response","respondSuccess","respondError","printNoFlipperWarning","__DEV__","console","warn","addPlugin","unsubscribe","queryClient","queryCache","getQueryCache","getQueries","getAll","getQueryByHash","queryHash","find","query","plugin","forEach","runInBackground","id","getId","_connection","registerPlugin","status","addFlipperPlugin","onConnect","connection","queries","getSerializedQueries","event","cashEvent","handleCacheEvent","receive","responder","fetch","success","ack","removeQueries","queryKey","exact","onDisconnect","emitter","NativeEventEmitter","addListener","p","params","startEventListeners"],"sourceRoot":""}